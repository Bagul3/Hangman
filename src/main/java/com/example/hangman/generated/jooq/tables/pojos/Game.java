/*
 * This file is generated by jOOQ.
 */
package com.example.hangman.generated.jooq.tables.pojos;


import java.io.Serializable;
import java.sql.Timestamp;
import java.util.Arrays;

import javax.annotation.processing.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Game implements Serializable {

    private static final long serialVersionUID = -1651359113;

    private Integer   id;
    private String[]  guessedLetters;
    private Integer   numberOfGuessesAllowed;
    private Integer   numberOfGuesses;
    private String    word;
    private Timestamp startTime;
    private Timestamp endTime;
    private Timestamp lastUpdated;

    public Game() {}

    public Game(Game value) {
        this.id = value.id;
        this.guessedLetters = value.guessedLetters;
        this.numberOfGuessesAllowed = value.numberOfGuessesAllowed;
        this.numberOfGuesses = value.numberOfGuesses;
        this.word = value.word;
        this.startTime = value.startTime;
        this.endTime = value.endTime;
        this.lastUpdated = value.lastUpdated;
    }

    public Game(
        Integer   id,
        String[]  guessedLetters,
        Integer   numberOfGuessesAllowed,
        Integer   numberOfGuesses,
        String    word,
        Timestamp startTime,
        Timestamp endTime,
        Timestamp lastUpdated
    ) {
        this.id = id;
        this.guessedLetters = guessedLetters;
        this.numberOfGuessesAllowed = numberOfGuessesAllowed;
        this.numberOfGuesses = numberOfGuesses;
        this.word = word;
        this.startTime = startTime;
        this.endTime = endTime;
        this.lastUpdated = lastUpdated;
    }

    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String[] getGuessedLetters() {
        return this.guessedLetters;
    }

    public void setGuessedLetters(String... guessedLetters) {
        this.guessedLetters = guessedLetters;
    }

    public Integer getNumberOfGuessesAllowed() {
        return this.numberOfGuessesAllowed;
    }

    public void setNumberOfGuessesAllowed(Integer numberOfGuessesAllowed) {
        this.numberOfGuessesAllowed = numberOfGuessesAllowed;
    }

    public Integer getNumberOfGuesses() {
        return this.numberOfGuesses;
    }

    public void setNumberOfGuesses(Integer numberOfGuesses) {
        this.numberOfGuesses = numberOfGuesses;
    }

    public String getWord() {
        return this.word;
    }

    public void setWord(String word) {
        this.word = word;
    }

    public Timestamp getStartTime() {
        return this.startTime;
    }

    public void setStartTime(Timestamp startTime) {
        this.startTime = startTime;
    }

    public Timestamp getEndTime() {
        return this.endTime;
    }

    public void setEndTime(Timestamp endTime) {
        this.endTime = endTime;
    }

    public Timestamp getLastUpdated() {
        return this.lastUpdated;
    }

    public void setLastUpdated(Timestamp lastUpdated) {
        this.lastUpdated = lastUpdated;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Game other = (Game) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        }
        else if (!id.equals(other.id))
            return false;
        if (guessedLetters == null) {
            if (other.guessedLetters != null)
                return false;
        }
        else if (!Arrays.equals(guessedLetters, other.guessedLetters))
            return false;
        if (numberOfGuessesAllowed == null) {
            if (other.numberOfGuessesAllowed != null)
                return false;
        }
        else if (!numberOfGuessesAllowed.equals(other.numberOfGuessesAllowed))
            return false;
        if (numberOfGuesses == null) {
            if (other.numberOfGuesses != null)
                return false;
        }
        else if (!numberOfGuesses.equals(other.numberOfGuesses))
            return false;
        if (word == null) {
            if (other.word != null)
                return false;
        }
        else if (!word.equals(other.word))
            return false;
        if (startTime == null) {
            if (other.startTime != null)
                return false;
        }
        else if (!startTime.equals(other.startTime))
            return false;
        if (endTime == null) {
            if (other.endTime != null)
                return false;
        }
        else if (!endTime.equals(other.endTime))
            return false;
        if (lastUpdated == null) {
            if (other.lastUpdated != null)
                return false;
        }
        else if (!lastUpdated.equals(other.lastUpdated))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.guessedLetters == null) ? 0 : Arrays.hashCode(this.guessedLetters));
        result = prime * result + ((this.numberOfGuessesAllowed == null) ? 0 : this.numberOfGuessesAllowed.hashCode());
        result = prime * result + ((this.numberOfGuesses == null) ? 0 : this.numberOfGuesses.hashCode());
        result = prime * result + ((this.word == null) ? 0 : this.word.hashCode());
        result = prime * result + ((this.startTime == null) ? 0 : this.startTime.hashCode());
        result = prime * result + ((this.endTime == null) ? 0 : this.endTime.hashCode());
        result = prime * result + ((this.lastUpdated == null) ? 0 : this.lastUpdated.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Game (");

        sb.append(id);
        sb.append(", ").append(Arrays.toString(guessedLetters));
        sb.append(", ").append(numberOfGuessesAllowed);
        sb.append(", ").append(numberOfGuesses);
        sb.append(", ").append(word);
        sb.append(", ").append(startTime);
        sb.append(", ").append(endTime);
        sb.append(", ").append(lastUpdated);

        sb.append(")");
        return sb.toString();
    }
}
